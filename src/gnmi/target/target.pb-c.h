/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: target/target.proto */

#ifndef PROTOBUF_C_target_2ftarget_2eproto__INCLUDED
#define PROTOBUF_C_target_2ftarget_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1004001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "gnmi/gnmi.pb-c.h"

typedef struct Target__Configuration Target__Configuration;
typedef struct Target__Configuration__RequestEntry Target__Configuration__RequestEntry;
typedef struct Target__Configuration__TargetEntry Target__Configuration__TargetEntry;
typedef struct Target__Configuration__MetaEntry Target__Configuration__MetaEntry;
typedef struct Target__Target Target__Target;
typedef struct Target__Target__MetaEntry Target__Target__MetaEntry;
typedef struct Target__Credentials Target__Credentials;


/* --- enums --- */


/* --- messages --- */

struct  Target__Configuration__RequestEntry
{
  ProtobufCMessage base;
  char *key;
  Gnmi__SubscribeRequest *value;
};
#define TARGET__CONFIGURATION__REQUEST_ENTRY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&target__configuration__request_entry__descriptor) \
    , (char *)protobuf_c_empty_string, NULL }


struct  Target__Configuration__TargetEntry
{
  ProtobufCMessage base;
  char *key;
  Target__Target *value;
};
#define TARGET__CONFIGURATION__TARGET_ENTRY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&target__configuration__target_entry__descriptor) \
    , (char *)protobuf_c_empty_string, NULL }


struct  Target__Configuration__MetaEntry
{
  ProtobufCMessage base;
  char *key;
  char *value;
};
#define TARGET__CONFIGURATION__META_ENTRY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&target__configuration__meta_entry__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


/*
 * Configuration holds all information necessary for a caching gNMI collector
 * to establish subscriptions to a list of gNMI targets.
 */
struct  Target__Configuration
{
  ProtobufCMessage base;
  /*
   * Request is a keyed list of all SubscriptionRequests that can be sent
   * to targets in the Configuration.
   * The request must have at minimum a SubscriptionList with a prefix
   * containing origin and one or more Subscriptions.  Only the STREAM mode is
   * supported.
   */
  size_t n_request;
  Target__Configuration__RequestEntry **request;
  /*
   * Target is the full list of targets connected to by a caching gNMI
   * collector.  The key of the map is a unique name to identify a target and
   * is set in the prefix.target of a SubscriptionRequest message when
   * connecting to each respective target.
   */
  size_t n_target;
  Target__Configuration__TargetEntry **target;
  /*
   * Identifier for the caching collector.
   */
  char *instance_id;
  /*
   * Additional config metadata.
   */
  size_t n_meta;
  Target__Configuration__MetaEntry **meta;
  /*
   * Revision for this Configuration. Systems that non-atomically write
   * configuration should populate and require revision, leveraging canonical
   * protobuf serialization of fields in order. Presence of this field makes no
   * guarantee. Consumers should account for atomicity constraints of their
   * environment and any custom encoding.
   */
  int64_t revision;
};
#define TARGET__CONFIGURATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&target__configuration__descriptor) \
    , 0,NULL, 0,NULL, (char *)protobuf_c_empty_string, 0,NULL, 0 }


struct  Target__Target__MetaEntry
{
  ProtobufCMessage base;
  char *key;
  char *value;
};
#define TARGET__TARGET__META_ENTRY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&target__target__meta_entry__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


/*
 * Target is the information necessary to establish a single gNMI Subscribe RPC
 * to be collected and cached.
 */
struct  Target__Target
{
  ProtobufCMessage base;
  /*
   * A list of address and port or name that resolves to an address and port.
   */
  size_t n_addresses;
  char **addresses;
  /*
   * Credentials to use in metadata for authorization of the RPC
   */
  Target__Credentials *credentials;
  /*
   * The request to be sent to the target. The string supplied is looked up in
   * the request map of the Configuration message.
   */
  char *request;
  /*
   * Additional target metadata.
   */
  size_t n_meta;
  Target__Target__MetaEntry **meta;
  /*
   * How should the target be dialed. This option allows for a custom
   * implementation for how this target is to be reached. If unset the
   * collector's default implementation will be used.
   */
  char *dialer;
};
#define TARGET__TARGET__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&target__target__descriptor) \
    , 0,NULL, NULL, (char *)protobuf_c_empty_string, 0,NULL, (char *)protobuf_c_empty_string }


/*
 * Credentials contains the fields necessary for authentication of the client to
 * the target.
 */
struct  Target__Credentials
{
  ProtobufCMessage base;
  char *username;
  char *password;
  /*
   * Password lookup ID.
   */
  char *password_id;
};
#define TARGET__CREDENTIALS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&target__credentials__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


/* Target__Configuration__RequestEntry methods */
void   target__configuration__request_entry__init
                     (Target__Configuration__RequestEntry         *message);
/* Target__Configuration__TargetEntry methods */
void   target__configuration__target_entry__init
                     (Target__Configuration__TargetEntry         *message);
/* Target__Configuration__MetaEntry methods */
void   target__configuration__meta_entry__init
                     (Target__Configuration__MetaEntry         *message);
/* Target__Configuration methods */
void   target__configuration__init
                     (Target__Configuration         *message);
size_t target__configuration__get_packed_size
                     (const Target__Configuration   *message);
size_t target__configuration__pack
                     (const Target__Configuration   *message,
                      uint8_t             *out);
size_t target__configuration__pack_to_buffer
                     (const Target__Configuration   *message,
                      ProtobufCBuffer     *buffer);
Target__Configuration *
       target__configuration__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   target__configuration__free_unpacked
                     (Target__Configuration *message,
                      ProtobufCAllocator *allocator);
/* Target__Target__MetaEntry methods */
void   target__target__meta_entry__init
                     (Target__Target__MetaEntry         *message);
/* Target__Target methods */
void   target__target__init
                     (Target__Target         *message);
size_t target__target__get_packed_size
                     (const Target__Target   *message);
size_t target__target__pack
                     (const Target__Target   *message,
                      uint8_t             *out);
size_t target__target__pack_to_buffer
                     (const Target__Target   *message,
                      ProtobufCBuffer     *buffer);
Target__Target *
       target__target__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   target__target__free_unpacked
                     (Target__Target *message,
                      ProtobufCAllocator *allocator);
/* Target__Credentials methods */
void   target__credentials__init
                     (Target__Credentials         *message);
size_t target__credentials__get_packed_size
                     (const Target__Credentials   *message);
size_t target__credentials__pack
                     (const Target__Credentials   *message,
                      uint8_t             *out);
size_t target__credentials__pack_to_buffer
                     (const Target__Credentials   *message,
                      ProtobufCBuffer     *buffer);
Target__Credentials *
       target__credentials__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   target__credentials__free_unpacked
                     (Target__Credentials *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Target__Configuration__RequestEntry_Closure)
                 (const Target__Configuration__RequestEntry *message,
                  void *closure_data);
typedef void (*Target__Configuration__TargetEntry_Closure)
                 (const Target__Configuration__TargetEntry *message,
                  void *closure_data);
typedef void (*Target__Configuration__MetaEntry_Closure)
                 (const Target__Configuration__MetaEntry *message,
                  void *closure_data);
typedef void (*Target__Configuration_Closure)
                 (const Target__Configuration *message,
                  void *closure_data);
typedef void (*Target__Target__MetaEntry_Closure)
                 (const Target__Target__MetaEntry *message,
                  void *closure_data);
typedef void (*Target__Target_Closure)
                 (const Target__Target *message,
                  void *closure_data);
typedef void (*Target__Credentials_Closure)
                 (const Target__Credentials *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor target__configuration__descriptor;
extern const ProtobufCMessageDescriptor target__configuration__request_entry__descriptor;
extern const ProtobufCMessageDescriptor target__configuration__target_entry__descriptor;
extern const ProtobufCMessageDescriptor target__configuration__meta_entry__descriptor;
extern const ProtobufCMessageDescriptor target__target__descriptor;
extern const ProtobufCMessageDescriptor target__target__meta_entry__descriptor;
extern const ProtobufCMessageDescriptor target__credentials__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_target_2ftarget_2eproto__INCLUDED */
