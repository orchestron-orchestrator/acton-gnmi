/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: gnmi_ext.proto */

#ifndef PROTOBUF_C_gnmi_5fext_2eproto__INCLUDED
#define PROTOBUF_C_gnmi_5fext_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1004001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "google/protobuf/duration.pb-c.c"

typedef struct GnmiExt__Extension GnmiExt__Extension;
typedef struct GnmiExt__RegisteredExtension GnmiExt__RegisteredExtension;
typedef struct GnmiExt__MasterArbitration GnmiExt__MasterArbitration;
typedef struct GnmiExt__Uint128 GnmiExt__Uint128;
typedef struct GnmiExt__Role GnmiExt__Role;
typedef struct GnmiExt__History GnmiExt__History;
typedef struct GnmiExt__TimeRange GnmiExt__TimeRange;
typedef struct GnmiExt__Commit GnmiExt__Commit;
typedef struct GnmiExt__CommitRequest GnmiExt__CommitRequest;
typedef struct GnmiExt__CommitConfirm GnmiExt__CommitConfirm;
typedef struct GnmiExt__CommitCancel GnmiExt__CommitCancel;
typedef struct GnmiExt__CommitSetRollbackDuration GnmiExt__CommitSetRollbackDuration;
typedef struct GnmiExt__Depth GnmiExt__Depth;
typedef struct GnmiExt__ConfigSubscription GnmiExt__ConfigSubscription;
typedef struct GnmiExt__ConfigSubscriptionStart GnmiExt__ConfigSubscriptionStart;
typedef struct GnmiExt__ConfigSubscriptionSyncDone GnmiExt__ConfigSubscriptionSyncDone;


/* --- enums --- */

/*
 * RegisteredExtension is an enumeration acting as a registry for extensions
 * defined by external sources.
 */
typedef enum _GnmiExt__ExtensionID {
  /*
   * New extensions are to be defined within this enumeration - their definition
   * MUST link to a reference describing their implementation.
   */
  GNMI_EXT__EXTENSION_ID__EID_UNSET = 0,
  /*
   * An experimental extension that may be used during prototyping of a new
   * extension.
   */
  GNMI_EXT__EXTENSION_ID__EID_EXPERIMENTAL = 999
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(GNMI_EXT__EXTENSION_ID)
} GnmiExt__ExtensionID;

/* --- messages --- */

typedef enum {
  GNMI_EXT__EXTENSION__EXT__NOT_SET = 0,
  GNMI_EXT__EXTENSION__EXT_REGISTERED_EXT = 1,
  GNMI_EXT__EXTENSION__EXT_MASTER_ARBITRATION = 2,
  GNMI_EXT__EXTENSION__EXT_HISTORY = 3,
  GNMI_EXT__EXTENSION__EXT_COMMIT = 4,
  GNMI_EXT__EXTENSION__EXT_DEPTH = 5,
  GNMI_EXT__EXTENSION__EXT_CONFIG_SUBSCRIPTION = 6
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(GNMI_EXT__EXTENSION__EXT__CASE)
} GnmiExt__Extension__ExtCase;

/*
 * The Extension message contains a single gNMI extension.
 */
struct  GnmiExt__Extension
{
  ProtobufCMessage base;
  GnmiExt__Extension__ExtCase ext_case;
  union {
    /*
     * A registered extension.
     */
    GnmiExt__RegisteredExtension *registered_ext;
    /*
     * Well known extensions.
     */
    /*
     * Master arbitration extension.
     */
    GnmiExt__MasterArbitration *master_arbitration;
    /*
     * History extension.
     */
    GnmiExt__History *history;
    /*
     * Commit confirmed extension.
     */
    GnmiExt__Commit *commit;
    /*
     * Depth extension.
     */
    GnmiExt__Depth *depth;
    /*
     * Config Subscription extension.
     */
    GnmiExt__ConfigSubscription *config_subscription;
  };
};
#define GNMI_EXT__EXTENSION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&gnmi_ext__extension__descriptor) \
    , GNMI_EXT__EXTENSION__EXT__NOT_SET, {0} }


/*
 * The RegisteredExtension message defines an extension which is defined outside
 * of this file.
 */
struct  GnmiExt__RegisteredExtension
{
  ProtobufCMessage base;
  /*
   * The unique ID assigned to this extension.
   */
  GnmiExt__ExtensionID id;
  /*
   * The binary-marshalled protobuf extension payload.
   */
  ProtobufCBinaryData msg;
};
#define GNMI_EXT__REGISTERED_EXTENSION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&gnmi_ext__registered_extension__descriptor) \
    , GNMI_EXT__EXTENSION_ID__EID_UNSET, {0,NULL} }


/*
 * MasterArbitration is used to select the master among multiple gNMI clients
 * with the same Roles. The client with the largest election_id is honored as
 * the master.
 * The document about gNMI master arbitration can be found at
 * https://github.com/openconfig/reference/blob/master/rpc/gnmi/gnmi-master-arbitration.md
 */
struct  GnmiExt__MasterArbitration
{
  ProtobufCMessage base;
  GnmiExt__Role *role;
  GnmiExt__Uint128 *election_id;
};
#define GNMI_EXT__MASTER_ARBITRATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&gnmi_ext__master_arbitration__descriptor) \
    , NULL, NULL }


/*
 * Representation of unsigned 128-bit integer.
 */
struct  GnmiExt__Uint128
{
  ProtobufCMessage base;
  uint64_t high;
  uint64_t low;
};
#define GNMI_EXT__UINT128__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&gnmi_ext__uint128__descriptor) \
    , 0, 0 }


/*
 * There can be one master for each role. The role is identified by its id.
 */
struct  GnmiExt__Role
{
  ProtobufCMessage base;
  /*
   * More fields can be added if needed, for example, to specify what paths the
   * role can read/write.
   */
  char *id;
};
#define GNMI_EXT__ROLE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&gnmi_ext__role__descriptor) \
    , (char *)protobuf_c_empty_string }


typedef enum {
  GNMI_EXT__HISTORY__REQUEST__NOT_SET = 0,
  GNMI_EXT__HISTORY__REQUEST_SNAPSHOT_TIME = 1,
  GNMI_EXT__HISTORY__REQUEST_RANGE = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(GNMI_EXT__HISTORY__REQUEST__CASE)
} GnmiExt__History__RequestCase;

/*
 * The History extension allows clients to request historical data. Its
 * spec can be found at
 * https://github.com/openconfig/reference/blob/master/rpc/gnmi/gnmi-history.md
 */
struct  GnmiExt__History
{
  ProtobufCMessage base;
  GnmiExt__History__RequestCase request_case;
  union {
    /*
     * Nanoseconds since the epoch
     */
    int64_t snapshot_time;
    GnmiExt__TimeRange *range;
  };
};
#define GNMI_EXT__HISTORY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&gnmi_ext__history__descriptor) \
    , GNMI_EXT__HISTORY__REQUEST__NOT_SET, {0} }


struct  GnmiExt__TimeRange
{
  ProtobufCMessage base;
  /*
   * Nanoseconds since the epoch
   */
  int64_t start;
  /*
   * Nanoseconds since the epoch
   */
  int64_t end;
};
#define GNMI_EXT__TIME_RANGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&gnmi_ext__time_range__descriptor) \
    , 0, 0 }


typedef enum {
  GNMI_EXT__COMMIT__ACTION__NOT_SET = 0,
  GNMI_EXT__COMMIT__ACTION_COMMIT = 2,
  GNMI_EXT__COMMIT__ACTION_CONFIRM = 3,
  GNMI_EXT__COMMIT__ACTION_CANCEL = 4,
  GNMI_EXT__COMMIT__ACTION_SET_ROLLBACK_DURATION = 5
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(GNMI_EXT__COMMIT__ACTION__CASE)
} GnmiExt__Commit__ActionCase;

/*
 * Commit confirmed extension allows automated revert of the configuration after
 * certain duration if an explicit confirmation is not issued. It allows
 * explicit cancellation of the commit during the rollback window. There cannot
 * be more than one commit active at a given time. The document about gNMI
 * commit confirmed can be found at
 * https://github.com/openconfig/reference/blob/master/rpc/gnmi/gnmi-commit-confirmed.md
 */
struct  GnmiExt__Commit
{
  ProtobufCMessage base;
  /*
   * ID is provided by the client during the commit request. During confirm and
   * cancel actions the provided ID should match the ID provided during commit.
   * If ID is not passed in any actions server shall return error.
   * Required.
   */
  char *id;
  GnmiExt__Commit__ActionCase action_case;
  union {
    /*
     * commit action creates a new commit. If a commit is on-going, server
     * returns error.
     */
    GnmiExt__CommitRequest *commit;
    /*
     * confirm action will confirm an on-going commit, the ID provided during
     * confirm should match the on-going commit ID.
     */
    GnmiExt__CommitConfirm *confirm;
    /*
     * cancel action will cancel an on-going commit, the ID provided during
     * cancel should match the on-going commit ID.
     */
    GnmiExt__CommitCancel *cancel;
    /*
     * set rollback duration action sets the rollback duration of an on-going commit
     * to a new value.
     * The ID provided with the Commit message should match the on-going commit ID.
     */
    GnmiExt__CommitSetRollbackDuration *set_rollback_duration;
  };
};
#define GNMI_EXT__COMMIT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&gnmi_ext__commit__descriptor) \
    , (char *)protobuf_c_empty_string, GNMI_EXT__COMMIT__ACTION__NOT_SET, {0} }


/*
 * CommitRequest is used to create a new confirmed commit. It hold additional
 * parameter requried for commit action.
 */
struct  GnmiExt__CommitRequest
{
  ProtobufCMessage base;
  /*
   * Maximum duration to wait for a confirmaton before reverting the commit.
   */
  Google__Protobuf__Duration *rollback_duration;
};
#define GNMI_EXT__COMMIT_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&gnmi_ext__commit_request__descriptor) \
    , NULL }


/*
 * CommitConfirm is used to confirm an on-going commit. It hold additional
 * parameter requried for confirm action.
 */
struct  GnmiExt__CommitConfirm
{
  ProtobufCMessage base;
};
#define GNMI_EXT__COMMIT_CONFIRM__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&gnmi_ext__commit_confirm__descriptor) \
     }


/*
 * CommitCancel is used to cancel an on-going commit. It hold additional
 * parameter requried for cancel action.
 */
struct  GnmiExt__CommitCancel
{
  ProtobufCMessage base;
};
#define GNMI_EXT__COMMIT_CANCEL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&gnmi_ext__commit_cancel__descriptor) \
     }


/*
 * CommitSetRollbackDuration is used to set the existing rollback duration value
 * of an on-going commit to a new desired value.
 */
struct  GnmiExt__CommitSetRollbackDuration
{
  ProtobufCMessage base;
  /*
   * Maximum duration to wait for a confirmaton before reverting the commit.
   */
  Google__Protobuf__Duration *rollback_duration;
};
#define GNMI_EXT__COMMIT_SET_ROLLBACK_DURATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&gnmi_ext__commit_set_rollback_duration__descriptor) \
    , NULL }


/*
 * Depth allows clients to specify the depth of the subtree to be returned in
 * the response. The depth is specified as the number of levels below the
 * specified path.
 * The depth is applied to all paths in the Get or Subscribe request.
 * The document about gNMI depth can be found at
 * https://github.com/openconfig/reference/tree/master/rpc/gnmi/gnmi-depth.md
 */
struct  GnmiExt__Depth
{
  ProtobufCMessage base;
  /*
   * The level of the subtree to be returned in the response.
   * Value of 0 means no depth limit and behaves the same as if the extension
   * was not specified.
   * Value of 1 means only the specified path and its direct children will be
   * returned.
   */
  uint32_t level;
};
#define GNMI_EXT__DEPTH__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&gnmi_ext__depth__descriptor) \
    , 0 }


typedef enum {
  GNMI_EXT__CONFIG_SUBSCRIPTION__ACTION__NOT_SET = 0,
  GNMI_EXT__CONFIG_SUBSCRIPTION__ACTION_START = 1,
  GNMI_EXT__CONFIG_SUBSCRIPTION__ACTION_SYNC_DONE = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(GNMI_EXT__CONFIG_SUBSCRIPTION__ACTION__CASE)
} GnmiExt__ConfigSubscription__ActionCase;

/*
 * ConfigSubscription extension allows clients to subscribe to configuration
 * schema nodes only.
 */
struct  GnmiExt__ConfigSubscription
{
  ProtobufCMessage base;
  GnmiExt__ConfigSubscription__ActionCase action_case;
  union {
    /*
     * ConfigSubscriptionStart is sent by the client in the SubscribeRequest
     */
    GnmiExt__ConfigSubscriptionStart *start;
    /*
     * ConfigSubscriptionSyncDone is sent by the server in the SubscribeResponse
     */
    GnmiExt__ConfigSubscriptionSyncDone *sync_done;
  };
};
#define GNMI_EXT__CONFIG_SUBSCRIPTION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&gnmi_ext__config_subscription__descriptor) \
    , GNMI_EXT__CONFIG_SUBSCRIPTION__ACTION__NOT_SET, {0} }


/*
 * ConfigSubscriptionStart is used to indicate to a target that for a given set
 * of paths in the SubscribeRequest, the client wishes to receive updates
 * for the configuration schema nodes only.
 */
struct  GnmiExt__ConfigSubscriptionStart
{
  ProtobufCMessage base;
};
#define GNMI_EXT__CONFIG_SUBSCRIPTION_START__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&gnmi_ext__config_subscription_start__descriptor) \
     }


/*
 * ConfigSubscriptionSyncDone is sent by the server in the SubscribeResponse
 * after all the updates for the configuration schema nodes have been sent.
 */
struct  GnmiExt__ConfigSubscriptionSyncDone
{
  ProtobufCMessage base;
  /*
   * ID of a commit confirm operation as assigned by the client
   * see Commit Confirm extension for more details.
   */
  char *commit_confirm_id;
  /*
   * ID of a commit as might be assigned by the server
   * when registering a commit operation.
   */
  char *server_commit_id;
  /*
   * If true indicates that the server is done processing the updates related to the
   * commit_confirm_id and/or server_commit_id.
   */
  protobuf_c_boolean done;
};
#define GNMI_EXT__CONFIG_SUBSCRIPTION_SYNC_DONE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&gnmi_ext__config_subscription_sync_done__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0 }


/* GnmiExt__Extension methods */
void   gnmi_ext__extension__init
                     (GnmiExt__Extension         *message);
size_t gnmi_ext__extension__get_packed_size
                     (const GnmiExt__Extension   *message);
size_t gnmi_ext__extension__pack
                     (const GnmiExt__Extension   *message,
                      uint8_t             *out);
size_t gnmi_ext__extension__pack_to_buffer
                     (const GnmiExt__Extension   *message,
                      ProtobufCBuffer     *buffer);
GnmiExt__Extension *
       gnmi_ext__extension__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   gnmi_ext__extension__free_unpacked
                     (GnmiExt__Extension *message,
                      ProtobufCAllocator *allocator);
/* GnmiExt__RegisteredExtension methods */
void   gnmi_ext__registered_extension__init
                     (GnmiExt__RegisteredExtension         *message);
size_t gnmi_ext__registered_extension__get_packed_size
                     (const GnmiExt__RegisteredExtension   *message);
size_t gnmi_ext__registered_extension__pack
                     (const GnmiExt__RegisteredExtension   *message,
                      uint8_t             *out);
size_t gnmi_ext__registered_extension__pack_to_buffer
                     (const GnmiExt__RegisteredExtension   *message,
                      ProtobufCBuffer     *buffer);
GnmiExt__RegisteredExtension *
       gnmi_ext__registered_extension__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   gnmi_ext__registered_extension__free_unpacked
                     (GnmiExt__RegisteredExtension *message,
                      ProtobufCAllocator *allocator);
/* GnmiExt__MasterArbitration methods */
void   gnmi_ext__master_arbitration__init
                     (GnmiExt__MasterArbitration         *message);
size_t gnmi_ext__master_arbitration__get_packed_size
                     (const GnmiExt__MasterArbitration   *message);
size_t gnmi_ext__master_arbitration__pack
                     (const GnmiExt__MasterArbitration   *message,
                      uint8_t             *out);
size_t gnmi_ext__master_arbitration__pack_to_buffer
                     (const GnmiExt__MasterArbitration   *message,
                      ProtobufCBuffer     *buffer);
GnmiExt__MasterArbitration *
       gnmi_ext__master_arbitration__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   gnmi_ext__master_arbitration__free_unpacked
                     (GnmiExt__MasterArbitration *message,
                      ProtobufCAllocator *allocator);
/* GnmiExt__Uint128 methods */
void   gnmi_ext__uint128__init
                     (GnmiExt__Uint128         *message);
size_t gnmi_ext__uint128__get_packed_size
                     (const GnmiExt__Uint128   *message);
size_t gnmi_ext__uint128__pack
                     (const GnmiExt__Uint128   *message,
                      uint8_t             *out);
size_t gnmi_ext__uint128__pack_to_buffer
                     (const GnmiExt__Uint128   *message,
                      ProtobufCBuffer     *buffer);
GnmiExt__Uint128 *
       gnmi_ext__uint128__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   gnmi_ext__uint128__free_unpacked
                     (GnmiExt__Uint128 *message,
                      ProtobufCAllocator *allocator);
/* GnmiExt__Role methods */
void   gnmi_ext__role__init
                     (GnmiExt__Role         *message);
size_t gnmi_ext__role__get_packed_size
                     (const GnmiExt__Role   *message);
size_t gnmi_ext__role__pack
                     (const GnmiExt__Role   *message,
                      uint8_t             *out);
size_t gnmi_ext__role__pack_to_buffer
                     (const GnmiExt__Role   *message,
                      ProtobufCBuffer     *buffer);
GnmiExt__Role *
       gnmi_ext__role__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   gnmi_ext__role__free_unpacked
                     (GnmiExt__Role *message,
                      ProtobufCAllocator *allocator);
/* GnmiExt__History methods */
void   gnmi_ext__history__init
                     (GnmiExt__History         *message);
size_t gnmi_ext__history__get_packed_size
                     (const GnmiExt__History   *message);
size_t gnmi_ext__history__pack
                     (const GnmiExt__History   *message,
                      uint8_t             *out);
size_t gnmi_ext__history__pack_to_buffer
                     (const GnmiExt__History   *message,
                      ProtobufCBuffer     *buffer);
GnmiExt__History *
       gnmi_ext__history__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   gnmi_ext__history__free_unpacked
                     (GnmiExt__History *message,
                      ProtobufCAllocator *allocator);
/* GnmiExt__TimeRange methods */
void   gnmi_ext__time_range__init
                     (GnmiExt__TimeRange         *message);
size_t gnmi_ext__time_range__get_packed_size
                     (const GnmiExt__TimeRange   *message);
size_t gnmi_ext__time_range__pack
                     (const GnmiExt__TimeRange   *message,
                      uint8_t             *out);
size_t gnmi_ext__time_range__pack_to_buffer
                     (const GnmiExt__TimeRange   *message,
                      ProtobufCBuffer     *buffer);
GnmiExt__TimeRange *
       gnmi_ext__time_range__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   gnmi_ext__time_range__free_unpacked
                     (GnmiExt__TimeRange *message,
                      ProtobufCAllocator *allocator);
/* GnmiExt__Commit methods */
void   gnmi_ext__commit__init
                     (GnmiExt__Commit         *message);
size_t gnmi_ext__commit__get_packed_size
                     (const GnmiExt__Commit   *message);
size_t gnmi_ext__commit__pack
                     (const GnmiExt__Commit   *message,
                      uint8_t             *out);
size_t gnmi_ext__commit__pack_to_buffer
                     (const GnmiExt__Commit   *message,
                      ProtobufCBuffer     *buffer);
GnmiExt__Commit *
       gnmi_ext__commit__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   gnmi_ext__commit__free_unpacked
                     (GnmiExt__Commit *message,
                      ProtobufCAllocator *allocator);
/* GnmiExt__CommitRequest methods */
void   gnmi_ext__commit_request__init
                     (GnmiExt__CommitRequest         *message);
size_t gnmi_ext__commit_request__get_packed_size
                     (const GnmiExt__CommitRequest   *message);
size_t gnmi_ext__commit_request__pack
                     (const GnmiExt__CommitRequest   *message,
                      uint8_t             *out);
size_t gnmi_ext__commit_request__pack_to_buffer
                     (const GnmiExt__CommitRequest   *message,
                      ProtobufCBuffer     *buffer);
GnmiExt__CommitRequest *
       gnmi_ext__commit_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   gnmi_ext__commit_request__free_unpacked
                     (GnmiExt__CommitRequest *message,
                      ProtobufCAllocator *allocator);
/* GnmiExt__CommitConfirm methods */
void   gnmi_ext__commit_confirm__init
                     (GnmiExt__CommitConfirm         *message);
size_t gnmi_ext__commit_confirm__get_packed_size
                     (const GnmiExt__CommitConfirm   *message);
size_t gnmi_ext__commit_confirm__pack
                     (const GnmiExt__CommitConfirm   *message,
                      uint8_t             *out);
size_t gnmi_ext__commit_confirm__pack_to_buffer
                     (const GnmiExt__CommitConfirm   *message,
                      ProtobufCBuffer     *buffer);
GnmiExt__CommitConfirm *
       gnmi_ext__commit_confirm__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   gnmi_ext__commit_confirm__free_unpacked
                     (GnmiExt__CommitConfirm *message,
                      ProtobufCAllocator *allocator);
/* GnmiExt__CommitCancel methods */
void   gnmi_ext__commit_cancel__init
                     (GnmiExt__CommitCancel         *message);
size_t gnmi_ext__commit_cancel__get_packed_size
                     (const GnmiExt__CommitCancel   *message);
size_t gnmi_ext__commit_cancel__pack
                     (const GnmiExt__CommitCancel   *message,
                      uint8_t             *out);
size_t gnmi_ext__commit_cancel__pack_to_buffer
                     (const GnmiExt__CommitCancel   *message,
                      ProtobufCBuffer     *buffer);
GnmiExt__CommitCancel *
       gnmi_ext__commit_cancel__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   gnmi_ext__commit_cancel__free_unpacked
                     (GnmiExt__CommitCancel *message,
                      ProtobufCAllocator *allocator);
/* GnmiExt__CommitSetRollbackDuration methods */
void   gnmi_ext__commit_set_rollback_duration__init
                     (GnmiExt__CommitSetRollbackDuration         *message);
size_t gnmi_ext__commit_set_rollback_duration__get_packed_size
                     (const GnmiExt__CommitSetRollbackDuration   *message);
size_t gnmi_ext__commit_set_rollback_duration__pack
                     (const GnmiExt__CommitSetRollbackDuration   *message,
                      uint8_t             *out);
size_t gnmi_ext__commit_set_rollback_duration__pack_to_buffer
                     (const GnmiExt__CommitSetRollbackDuration   *message,
                      ProtobufCBuffer     *buffer);
GnmiExt__CommitSetRollbackDuration *
       gnmi_ext__commit_set_rollback_duration__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   gnmi_ext__commit_set_rollback_duration__free_unpacked
                     (GnmiExt__CommitSetRollbackDuration *message,
                      ProtobufCAllocator *allocator);
/* GnmiExt__Depth methods */
void   gnmi_ext__depth__init
                     (GnmiExt__Depth         *message);
size_t gnmi_ext__depth__get_packed_size
                     (const GnmiExt__Depth   *message);
size_t gnmi_ext__depth__pack
                     (const GnmiExt__Depth   *message,
                      uint8_t             *out);
size_t gnmi_ext__depth__pack_to_buffer
                     (const GnmiExt__Depth   *message,
                      ProtobufCBuffer     *buffer);
GnmiExt__Depth *
       gnmi_ext__depth__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   gnmi_ext__depth__free_unpacked
                     (GnmiExt__Depth *message,
                      ProtobufCAllocator *allocator);
/* GnmiExt__ConfigSubscription methods */
void   gnmi_ext__config_subscription__init
                     (GnmiExt__ConfigSubscription         *message);
size_t gnmi_ext__config_subscription__get_packed_size
                     (const GnmiExt__ConfigSubscription   *message);
size_t gnmi_ext__config_subscription__pack
                     (const GnmiExt__ConfigSubscription   *message,
                      uint8_t             *out);
size_t gnmi_ext__config_subscription__pack_to_buffer
                     (const GnmiExt__ConfigSubscription   *message,
                      ProtobufCBuffer     *buffer);
GnmiExt__ConfigSubscription *
       gnmi_ext__config_subscription__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   gnmi_ext__config_subscription__free_unpacked
                     (GnmiExt__ConfigSubscription *message,
                      ProtobufCAllocator *allocator);
/* GnmiExt__ConfigSubscriptionStart methods */
void   gnmi_ext__config_subscription_start__init
                     (GnmiExt__ConfigSubscriptionStart         *message);
size_t gnmi_ext__config_subscription_start__get_packed_size
                     (const GnmiExt__ConfigSubscriptionStart   *message);
size_t gnmi_ext__config_subscription_start__pack
                     (const GnmiExt__ConfigSubscriptionStart   *message,
                      uint8_t             *out);
size_t gnmi_ext__config_subscription_start__pack_to_buffer
                     (const GnmiExt__ConfigSubscriptionStart   *message,
                      ProtobufCBuffer     *buffer);
GnmiExt__ConfigSubscriptionStart *
       gnmi_ext__config_subscription_start__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   gnmi_ext__config_subscription_start__free_unpacked
                     (GnmiExt__ConfigSubscriptionStart *message,
                      ProtobufCAllocator *allocator);
/* GnmiExt__ConfigSubscriptionSyncDone methods */
void   gnmi_ext__config_subscription_sync_done__init
                     (GnmiExt__ConfigSubscriptionSyncDone         *message);
size_t gnmi_ext__config_subscription_sync_done__get_packed_size
                     (const GnmiExt__ConfigSubscriptionSyncDone   *message);
size_t gnmi_ext__config_subscription_sync_done__pack
                     (const GnmiExt__ConfigSubscriptionSyncDone   *message,
                      uint8_t             *out);
size_t gnmi_ext__config_subscription_sync_done__pack_to_buffer
                     (const GnmiExt__ConfigSubscriptionSyncDone   *message,
                      ProtobufCBuffer     *buffer);
GnmiExt__ConfigSubscriptionSyncDone *
       gnmi_ext__config_subscription_sync_done__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   gnmi_ext__config_subscription_sync_done__free_unpacked
                     (GnmiExt__ConfigSubscriptionSyncDone *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*GnmiExt__Extension_Closure)
                 (const GnmiExt__Extension *message,
                  void *closure_data);
typedef void (*GnmiExt__RegisteredExtension_Closure)
                 (const GnmiExt__RegisteredExtension *message,
                  void *closure_data);
typedef void (*GnmiExt__MasterArbitration_Closure)
                 (const GnmiExt__MasterArbitration *message,
                  void *closure_data);
typedef void (*GnmiExt__Uint128_Closure)
                 (const GnmiExt__Uint128 *message,
                  void *closure_data);
typedef void (*GnmiExt__Role_Closure)
                 (const GnmiExt__Role *message,
                  void *closure_data);
typedef void (*GnmiExt__History_Closure)
                 (const GnmiExt__History *message,
                  void *closure_data);
typedef void (*GnmiExt__TimeRange_Closure)
                 (const GnmiExt__TimeRange *message,
                  void *closure_data);
typedef void (*GnmiExt__Commit_Closure)
                 (const GnmiExt__Commit *message,
                  void *closure_data);
typedef void (*GnmiExt__CommitRequest_Closure)
                 (const GnmiExt__CommitRequest *message,
                  void *closure_data);
typedef void (*GnmiExt__CommitConfirm_Closure)
                 (const GnmiExt__CommitConfirm *message,
                  void *closure_data);
typedef void (*GnmiExt__CommitCancel_Closure)
                 (const GnmiExt__CommitCancel *message,
                  void *closure_data);
typedef void (*GnmiExt__CommitSetRollbackDuration_Closure)
                 (const GnmiExt__CommitSetRollbackDuration *message,
                  void *closure_data);
typedef void (*GnmiExt__Depth_Closure)
                 (const GnmiExt__Depth *message,
                  void *closure_data);
typedef void (*GnmiExt__ConfigSubscription_Closure)
                 (const GnmiExt__ConfigSubscription *message,
                  void *closure_data);
typedef void (*GnmiExt__ConfigSubscriptionStart_Closure)
                 (const GnmiExt__ConfigSubscriptionStart *message,
                  void *closure_data);
typedef void (*GnmiExt__ConfigSubscriptionSyncDone_Closure)
                 (const GnmiExt__ConfigSubscriptionSyncDone *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    gnmi_ext__extension_id__descriptor;
extern const ProtobufCMessageDescriptor gnmi_ext__extension__descriptor;
extern const ProtobufCMessageDescriptor gnmi_ext__registered_extension__descriptor;
extern const ProtobufCMessageDescriptor gnmi_ext__master_arbitration__descriptor;
extern const ProtobufCMessageDescriptor gnmi_ext__uint128__descriptor;
extern const ProtobufCMessageDescriptor gnmi_ext__role__descriptor;
extern const ProtobufCMessageDescriptor gnmi_ext__history__descriptor;
extern const ProtobufCMessageDescriptor gnmi_ext__time_range__descriptor;
extern const ProtobufCMessageDescriptor gnmi_ext__commit__descriptor;
extern const ProtobufCMessageDescriptor gnmi_ext__commit_request__descriptor;
extern const ProtobufCMessageDescriptor gnmi_ext__commit_confirm__descriptor;
extern const ProtobufCMessageDescriptor gnmi_ext__commit_cancel__descriptor;
extern const ProtobufCMessageDescriptor gnmi_ext__commit_set_rollback_duration__descriptor;
extern const ProtobufCMessageDescriptor gnmi_ext__depth__descriptor;
extern const ProtobufCMessageDescriptor gnmi_ext__config_subscription__descriptor;
extern const ProtobufCMessageDescriptor gnmi_ext__config_subscription_start__descriptor;
extern const ProtobufCMessageDescriptor gnmi_ext__config_subscription_sync_done__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_gnmi_5fext_2eproto__INCLUDED */
